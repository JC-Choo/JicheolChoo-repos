apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def readVersion() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
    } finally {
        if (stream != null) stream.close()
    }
    if (!version['major']) version['major'] = "1"
    if (!version['minor']) version['minor'] = "0"
    if (!version['patch']) version['patch'] = "0"
    if (!version['code']) version['code'] = "1"
    return version
}

def readVersionName() {
    def version = readVersion()
    return "${version['major']}.${version['minor']}.${version['patch']}"
}

def readVersionCode() {
    def version = readVersion()
    def code = version['code'] as int
    return code
}

// region 버전 자동 증가
def incrementVersionNumber(def type = "build") {
    def versionFile = new File(project.rootDir, 'version.properties')

    def version = readVersion()

    def major = version['major'] as int
    def minor = version['minor'] as int
    def patch = version['patch'] as int
    def build = version['build'] as int

    if (type == 'major') {
        major++
        minor = 0
        patch = 0
    } else if (type == 'minor') {
        minor++
        patch = 0
    }else if (type == 'patch') {
        patch++
    }

    build++

    version['major'] = major.toString()
    version['minor'] = minor.toString()
    version['patch'] = patch.toString()
    version['build'] = build.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }

    return major + "." + minor
}

task doMajorVersionIncrement {
    doLast {
        println "Incrementing major version..."
        incrementVersionNumber('major')
    }
}

task doMinorVersionIncrement {
    doLast {
        println "Incrementing minor version..."
        incrementVersionNumber('minor')
    }
}

task doPatchVersionIncrement {
    doLast {
        println "Incrementing patch version..."
        incrementVersionNumber('patch')
    }
}

task doBuildNumberIncrement {
    doLast {
        println "Incrementing build number..."
        incrementVersionNumber('build')
    }
}
// endregion

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "dev.chu.memo"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode readVersionCode()
        versionName readVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        releaseWithSignedKey {
            keyAlias SIGNED_KEY_ALIAS
            keyPassword SIGNED_KEY_PASSWORD
            storeFile file(SIGNED_STORE_FILE)
            storePassword SIGNED_STORE_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.releaseWithSignedKey
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    // For Kotlin use paging-runtime-ktx

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // glide : https://github.com/bumptech/glide
    def glideVersion = "4.10.0"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // lifecycle : https://developer.android.com/jetpack/androidx/releases/lifecycle
    def lifecycleVersion = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"

    // room : https://developer.android.com/jetpack/androidx/releases/room
    def roomVersion = "2.2.4"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    kapt "androidx.room:room-compiler:$roomVersion"

    // gson : https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.8.6'

    def retrofitVersion = '2.6.2'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.3.1'
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"\

    // google map
    def googleMapVersion = "17.0.0"
    implementation "com.google.android.gms:play-services-maps:$googleMapVersion"
    implementation "com.google.android.gms:play-services-location:$googleMapVersion"

    implementation 'gun0912.ted:tedpermission:2.1.0'
}
